from types import NoneType

from aiogram import types, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery

from core.database.requests import get_user, get_client_orders, delete_advert, get_advert
from core.fsm.advert import FSMAdvert
from core.handlers.basic import cmd_start
from core.keyboards.callbackdata import ClientCabinet
from core.keyboards.inline_keyboards import chats_choice, client_cabinet, my_orders_keyboard, are_you_sure_delete, \
    after_client_deletes_advert
from core.keyboards.reply_keyboards import cancel

client_router = Router()


@client_router.callback_query(ClientCabinet.filter(F.event == 'info'))
async def my_orders(query: CallbackQuery, callback_data: ClientCabinet):
    status = callback_data.status
    advert_id = callback_data.index
    advert = await get_advert(advert_id=advert_id)
    note = advert.note
    status_text = ''
    if status == 'approved':
        status_text = '–û–¥–æ–±—Ä–µ–Ω–æ‚úÖ\n–û–ø–ª–∞—Ç–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã!'
    elif status == 'declined':
        status_text = f'–û—Ç–∫–∞–∑‚ùå\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:\n{note}'
    elif status == 'paid':
        status_text = '–û–ø–ª–∞—á–µ–Ω–æ‚úÖ\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –¥–µ–Ω—å!'
    elif status == 'published':
        status_text = '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æüéâ'
    else:
        status_text = '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏üßëüèª‚Äçüíª\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!'
    await query.answer(
        text=f'–ß–∞—Ç/–∫–∞–Ω–∞–ª: {advert.chat.name if advert.chat is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}\n'
             f'–î–∞—Ç–∞: {advert.posted_at.strftime("%d/%m/%Y")}\n'
             f'–°—Ä–æ–∫: {advert.tariff.days if advert.tariff is not None else "—Ö"} –¥–Ω–µ–π\n'
             f'–¶–µ–Ω–∞: {advert.tariff.price if advert.tariff is not None else "—Ö"} ‚ÇΩ\n'
             f'–°—Ç–∞—Ç—É—Å: {status_text}\n', show_alert=True)


@client_router.callback_query(ClientCabinet.filter(F.event == 'to_main_menu'))
async def to_main_menu_function(query: CallbackQuery, callback_data: ClientCabinet):
    await query.message.delete()
    await cmd_start(message=query.message, state=None)


@client_router.callback_query(ClientCabinet.filter(F.event == 'delete_order'))
async def delete_my_order(query: CallbackQuery, callback_data: ClientCabinet):
    status = callback_data.status
    if not (status == 'approved' or status == 'declined'):
        await query.answer(
            text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏(–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏) –∏ –î–û –æ–ø–ª–∞—Ç—ã',
            show_alert=True)
    else:
        await query.message.delete()
        await query.message.answer(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?',
                                   reply_markup=await are_you_sure_delete(current_index=int(callback_data.note),
                                                                          advert_id=callback_data.index))


@client_router.callback_query(ClientCabinet.filter(F.event == 'surely_delete_advert'))
async def surely_delete_my_order(query: CallbackQuery, callback_data: ClientCabinet):
    advert_id = int(callback_data.note)
    result = await delete_advert(advert_id=advert_id)
    if result == 'deleted':
        await query.message.edit_text(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æüóëÔ∏è‚úÖ',
                                      reply_markup=await after_client_deletes_advert(index=callback_data.index))
    elif result == 'not_found':
        await query.message.edit_text(
            text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω–æü§î, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, '
                 '–µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É!',
            reply_markup=await after_client_deletes_advert(index=callback_data.index))
    else:
        await query.message.edit_text(text='‚ùó–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùó–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ãüßëüèª‚Äçüíª',
                                      reply_markup=await after_client_deletes_advert(index=callback_data.index))


@client_router.callback_query(ClientCabinet.filter(F.event == 'to_client_cabinet'))
async def my_orders(query: CallbackQuery, callback_data: ClientCabinet):
    await query.message.delete()
    await cmd_cabinet(message=query.message)


@client_router.callback_query(ClientCabinet.filter(F.event == 'to_my_orders'))
async def my_orders(query: CallbackQuery, callback_data: ClientCabinet):
    my_orders = await get_client_orders(user_id=query.message.chat.id)
    if len(my_orders) > 0:
        advert = my_orders[min(callback_data.index, len(my_orders) - 1)]
        await query.message.delete()
        media_type = advert.media_type
        if media_type == 'photo':
            await query.message.bot.send_photo(chat_id=query.message.chat.id, photo=advert.media_id,
                                               caption=advert.text,
                                               reply_markup=await my_orders_keyboard(current_index=callback_data.index,
                                                                                     length=len(my_orders),
                                                                                     advert_id=advert.id,
                                                                                     advert_status=advert.status,
                                                                                     note=''))
        else:
            await query.message.bot.send_video(chat_id=query.message.chat.id, video=advert.media_id,
                                               caption=advert.text,
                                               reply_markup=await my_orders_keyboard(current_index=callback_data.index,
                                                                                     length=len(my_orders),
                                                                                     advert_id=advert.id,
                                                                                     advert_status=advert.status,
                                                                                     note=''))
    else:
        if callback_data.note == 'after_delete_order':
            await query.message.delete()
            await cmd_cabinet(message=query.message)
        else:
            await query.answer(text='–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ãü•∫', show_alert=True)


@client_router.message(F.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cmd_cabinet(message: types.Message):
    if type(message.text) is str and not (type(message.text) is NoneType):
        if message.text.lower() == '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            await message.delete()
    user_id = message.chat.id
    user = await get_user(user_id)
    text = (f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, {message.from_user.full_name}!\n'
            f'–£ –≤–∞—Å {len(user.adverts) if type(user) is not NoneType else 0} –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–∑–º–µ—à–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã\n'
            # f'–£ –≤–∞—Å {len(user.questions) if type(user) is not NoneType else 0} –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n'
            f'–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance if type(user) is not NoneType else 0}')
    if type(user) is not NoneType:
        if user.is_admin:
            text += f'\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞!'
        elif user.is_moderator:
            text += f'\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞!'
    await message.answer(text, reply_markup=await client_cabinet())


@client_router.message(F.text.lower() == "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", StateFilter(default_state))
async def cmd_advert(message: types.Message, state: FSMContext):
    await message.answer(
        '–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
        '–∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"',
        reply_markup=await cancel())
    sent_message = await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã:',
                                        reply_markup=await chats_choice())
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(FSMAdvert.choose_chat)
    await state.update_data({'message_id': sent_message.message_id})
